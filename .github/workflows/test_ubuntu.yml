name: Test bit7z on Ubuntu with multiple configurations
on: [pull_request, push]

jobs:
  build:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request'
      || contains(github.event.head_commit.message, '[test]')
      || startsWith(github.ref, 'refs/tags/v')

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        build_type: [Debug, Release]
        c_compiler: [gcc, clang]
        bit7z_auto_format: [OFF, ON]
        bit7z_regex_matching: [OFF, ON]
        bit7z_link_libcpp: [OFF, ON]
        include:
          - c_compiler: gcc
            cpp_compiler: g++
            use_system_7zip: OFF
          - c_compiler: clang
            cpp_compiler: clang++
            use_system_7zip: OFF
        exclude:
          - c_compiler: gcc
            bit7z_link_libcpp: ON

    steps:     
    - name: Build 7z.so for tests
      shell: bash
      run: |
        mkdir -p ${{ github.workspace }}/bin/x64/
        git clone --depth 1 https://github.com/rikyoz/7-Zip ${{ github.workspace }}/../7-zip
        cd ${{ github.workspace }}/../7-zip/CPP/7zip/Bundles/Format7zF/
        make -j -f ../../cmpl_gcc.mak
        cp b/g/7z.so ${{ github.workspace }}/bin/x64/7z.so
    
    - uses: actions/checkout@v3

    - uses: ./.github/actions/test_action
      name: Building and testing bit7z
      with:
        c_compiler: ${{ matrix.c_compiler }}
        cpp_compiler: ${{ matrix.cpp_compiler }}
        build_type: ${{ matrix.build_type }}
        build_flags: |
            -DBIT7Z_TESTS_USE_SYSTEM_7ZIP=OFF -DBIT7Z_AUTO_FORMAT=${{ matrix.bit7z_auto_format }} -DBIT7Z_REGEX_MATCHING=${{ matrix.bit7z_regex_matching }} -DBIT7Z_LINK_LIBCPP=${{ matrix.bit7z_link_libcpp }}