name: 'Test bit7z'
description: 'Build and test bit7z'
inputs:
  c_compiler:
    description: 'C Compiler'
    required: true
  cpp_compiler:
    description: 'C++ Compiler'
    required: true
  build_type:
    description: 'Build Type'
    required: true
  build_flags:
    description: 'Build flags'
    required: true
  
runs:
  using: "composite"
  steps:
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      shell: bash
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ inputs.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ inputs.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
        -DBIT7Z_BUILD_TESTS=ON
        -DBIT7Z_ENABLE_SANITIZERS=ON
        ${{ inputs.build_flags }}
        -S ${{ github.workspace }}

    - name: Build bit7z
      shell: bash
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ inputs.build_type }} --parallel

    - name: Test bit7z
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Disabling alloc_dealloc_mismatch for address sanitizer until https://github.com/llvm/llvm-project/issues/52771 is fixed
      env:
        ASAN_OPTIONS: alloc_dealloc_mismatch=0
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-target bit7z-tests --build-config ${{ inputs.build_type }} --output-on-failure
